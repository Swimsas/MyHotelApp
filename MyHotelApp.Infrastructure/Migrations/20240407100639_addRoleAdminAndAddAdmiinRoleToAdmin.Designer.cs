// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyHotelApp.Infrastructure.Data;

#nullable disable

namespace MyHotelApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240407100639_addRoleAdminAndAddAdmiinRoleToAdmin")]
    partial class AddRoleAdminAndAddAdmiinRoleToAdmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "67d0d374-06f9-41bd-8005-7b8d11d13919",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d2c465c4-7414-43db-931e-fba9a322125b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c595a4f-76ec-46a7-876a-6dd5eb4810ea",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "AMIN@MAIL.COM",
                            NormalizedUserName = "AMIN@MAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB3zKPY/L9v5Qahg/RcXALbwMdC0PbnkRjpkaznftxb5OQA9p0DwxNh8WrGTsjB/ng==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "333cb4ea-1316-4709-8c54-41e1708593f8",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d2c465c4-7414-43db-931e-fba9a322125b",
                            RoleId = "1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Second"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Third"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fourth"
                        });
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.ReservationRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationRooms");
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("IdReviewer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fantastic experience! Cozy ambiance, impeccable service, divine food.",
                            IdReviewer = "",
                            Name = "Sarah Johnson",
                            Rating = 5
                        },
                        new
                        {
                            Id = 2,
                            Description = "Disappointing experience. Overwhelmed staff, mediocre food.",
                            IdReviewer = "",
                            Name = "Michael Smith",
                            Rating = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Hidden gem! Lively atmosphere, friendly staff, top-notch cocktails.",
                            IdReviewer = "",
                            Name = "Emily Brown",
                            Rating = 4
                        },
                        new
                        {
                            Id = 4,
                            Description = "Decent place with average food. Nothing stood out.",
                            IdReviewer = "",
                            Name = "David Miller",
                            Rating = 3
                        },
                        new
                        {
                            Id = 5,
                            Description = "Overpriced. Small portions, unimpressive flavors.",
                            IdReviewer = "",
                            Name = "Sophia Garcia",
                            Rating = 2
                        },
                        new
                        {
                            Id = 6,
                            Description = "Great location, friendly staff, cleanliness could be improved.",
                            IdReviewer = "",
                            Name = "John Doe",
                            Rating = 4
                        },
                        new
                        {
                            Id = 7,
                            Description = "Exceeded expectations! Beautiful rooms, excellent service, delicious breakfast.",
                            IdReviewer = "",
                            Name = "Alice Green",
                            Rating = 5
                        },
                        new
                        {
                            Id = 8,
                            Description = "Average experience. Decent room, disturbing noise.",
                            IdReviewer = "",
                            Name = "Robert White",
                            Rating = 3
                        },
                        new
                        {
                            Id = 9,
                            Description = "Lovely stay! Attentive staff, clean and comfortable room, breathtaking view.",
                            IdReviewer = "",
                            Name = "Emma Taylor",
                            Rating = 5
                        },
                        new
                        {
                            Id = 10,
                            Description = "Disappointed with rude service and misrepresented room.",
                            IdReviewer = "",
                            Name = "William Clark",
                            Rating = 1
                        });
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ViewTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("ViewTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FloorId = 1,
                            ImgUrl = "https://images.unsplash.com/photo-1611892440504-42a792e24d32?q=80&w=1000&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8aG90ZWwlMjByb29tfGVufDB8fDB8fHww",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            FloorId = 1,
                            ImgUrl = "https://t3.ftcdn.net/jpg/02/71/08/28/360_F_271082810_CtbTjpnOU3vx43ngAKqpCPUBx25udBrg.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            FloorId = 1,
                            ImgUrl = "https://images.unsplash.com/photo-1578683010236-d716f9a3f461?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            FloorId = 1,
                            ImgUrl = "https://images.unsplash.com/photo-1631049035182-249067d7618e?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            FloorId = 1,
                            ImgUrl = "https://images.unsplash.com/photo-1608198399988-341f712c3711?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            FloorId = 1,
                            ImgUrl = "https://t3.ftcdn.net/jpg/02/71/08/28/360_F_271082810_CtbTjpnOU3vx43ngAKqpCPUBx25udBrg.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            FloorId = 1,
                            ImgUrl = "https://images.unsplash.com/photo-1608198399988-341f712c3711?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            FloorId = 1,
                            ImgUrl = "https://images.unsplash.com/photo-1592229505726-ca121723b8ef?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            FloorId = 1,
                            ImgUrl = "https://plus.unsplash.com/premium_photo-1661956080119-71234af803b3?q=80&w=2012&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            FloorId = 1,
                            ImgUrl = "https://images.unsplash.com/photo-1512918728675-ed5a9ecdebfd?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            FloorId = 2,
                            ImgUrl = "https://www.rd.com/wp-content/uploads/2017/09/28_starwoodhotels_Dreamy-Hotel-Rooms-With-Views-For-Days_starwoodhotels.jpg?resize=640%2C426",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            FloorId = 2,
                            ImgUrl = "https://www.travelandleisure.com/thmb/BVXwxaCEyKbstCpScLm0tKPxuIE=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/1-b76afaa92ebb4386b92ccd18395f5880.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            FloorId = 2,
                            ImgUrl = "https://image-tc.galaxy.tf/wijpeg-803x266hfn7ecl37odjx1iys8/usat-terrace-garden-view-2-9ffe77_wide.jpg?crop=0%2C85%2C1620%2C911",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 14,
                            FloorId = 2,
                            ImgUrl = "https://images.squarespace-cdn.com/content/v1/52da9677e4b03d314575985a/29d0375b-d25e-4483-b3dc-b7f5666bded1/Amsterdam+Hotels+with+Best+Views+-+Anantara+Grand+Hotel+Krasnapolsky+Amsterdam.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 15,
                            FloorId = 2,
                            ImgUrl = "https://sauntonsands.co.uk/sites/default/files/styles/940x690/public/2023-06/Double%20sea%20facing%20room%202023%201.jpg?h=c6980913&itok=QGO2J_G6",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 16,
                            FloorId = 2,
                            ImgUrl = "https://www.travelrepublic.co.uk/blog///wp-content/uploads/2012/10/Jade-mountaibn.jpg",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            FloorId = 2,
                            ImgUrl = "https://d2mo2a5fvrklap.cloudfront.net/app/uploads/sites/11/2022/07/13000012/oceanviewsrooms-hero-desktop-1.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 18,
                            FloorId = 2,
                            ImgUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQK0sYqGA6P7ELOT0Q1xIr2mvHP81kBTFjhZg&usqp=CAU",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 19,
                            FloorId = 2,
                            ImgUrl = "https://www.niccolohotels.com/getmedia/cd170107-1f9c-4540-a549-fcfa8da310b8/NINCQ_N3_Deluxe_City_View_King-2_1000-560px.jpg?width=1000&height=560&ext=.jpg",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            FloorId = 2,
                            ImgUrl = "https://static.travelclick.com/assets/hotel/108321/media/room/detail-image/455x400_enhanced.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 21,
                            FloorId = 2,
                            ImgUrl = "https://www.valleyviewcasino.com/wp-content/uploads/gallery_deluxe_2.jpg.webp",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 22,
                            FloorId = 2,
                            ImgUrl = "https://www.tripsavvy.com/thmb/YkOq94GddksqrDCnMfG8SyDWmSM=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/Pacific-Rooms-Post-Ranch-Inn-56a4e76a5f9b58b7d0d9d1bc.jpg",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 23,
                            FloorId = 3,
                            ImgUrl = "https://d2f304910ir8yu.cloudfront.net/wp-content/uploads/2023/01/04160614/Oceanview-Guestroom-King-1-The-Boca-Raton-Beach-Club-1920x1080-1.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 24,
                            FloorId = 3,
                            ImgUrl = "https://www.journeyera.com/wp-content/uploads/2023/09/Hotels_San_Francisco_Best_Views-91-1024x683.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 25,
                            FloorId = 3,
                            ImgUrl = "https://images.mirai.com/INFOROOMS/10110403/XLjhBErmnwSSih0RkUg7/XLjhBErmnwSSih0RkUg7_original.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 26,
                            FloorId = 3,
                            ImgUrl = "https://www.royallancaster.com/wp-content/uploads/2018/03/Royal-Suite-Cozy.jpg",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 27,
                            FloorId = 3,
                            ImgUrl = "https://image-tc.galaxy.tf/wijpeg-1ep2143ci3dsvirm90ud0wv8l/rockymountainphotoco-16-opt_standard.jpg?crop=107%2C0%2C1707%2C1280",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 28,
                            FloorId = 3,
                            ImgUrl = "https://static.travelclick.com/assets/hotel/108321/media/room/detail-image/664x386_adfvh_deluxe_room1_enhanced.png",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 29,
                            FloorId = 3,
                            ImgUrl = "https://www.travelandleisure.com/thmb/JIoqZXurmgjBU-aRjKthU7oKu8A=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/1-71d7208a004a48b7bc1617a7e77183ea.jpg",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 30,
                            FloorId = 3,
                            ImgUrl = "https://image-tc.galaxy.tf/wijpeg-5bf9r2ij6tztosz1vloj6bmzx/lp-06342_standard.jpg?crop=84%2C0%2C1333%2C1000",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 31,
                            FloorId = 3,
                            ImgUrl = "https://www.caesars.com/content/dam/flv/Room/Standard%20Room/Flamingo-Room/flv-flaming-room-2-queens-garden-view-1160px.jpeg.transform/slider-img/image.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 32,
                            FloorId = 3,
                            ImgUrl = "https://assets-global.website-files.com/656dadf7ca1efe1c3d4a2cfb/659583c546cf30603d4725c8_Frame%2090%20(1).png",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 33,
                            FloorId = 3,
                            ImgUrl = "https://images.squarespace-cdn.com/content/v1/52da9677e4b03d314575985a/9615bcfc-572f-499a-b657-eaf4bd43aa01/Barcelona+Hotels+with+Best+Views+-+Condes+de+Barcelona.jpg",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 34,
                            FloorId = 4,
                            ImgUrl = "https://symphony.cdn.tambourine.com/_pacifica-hotels/media/marina-del-rey-rooms-grand-one-bedroom-marina-suite-02-5f03993dbbf97.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 35,
                            FloorId = 4,
                            ImgUrl = "https://www.jetsetter.com//uploads/sites/7/2018/04/YgAlwLap-1-1380x690.jpeg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 36,
                            FloorId = 4,
                            ImgUrl = "https://www.treehousehotels.com/sites/default/files/styles/card_3_up_xl/public/2019-10/Treehouse-London-2019-%2825%29.jpg?itok=sOi8nz8P",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 37,
                            FloorId = 4,
                            ImgUrl = "https://s7d1.scene7.com/is/image/marriotts7prod/rz-melrz-king-room-with-bay-views-38149:Classic-Hor?wid=1215&fit=constrain",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 38,
                            FloorId = 4,
                            ImgUrl = "https://image-tc.galaxy.tf/wijpeg-15mjlf1rrmlwe31v0c75ato6j/ocean-view-room-ccbh-small_wide.jpg?crop=0%2C113%2C1200%2C675",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 39,
                            FloorId = 4,
                            ImgUrl = "https://d3tm25asqtyj7x.cloudfront.net/hotel/Twin-Room/_1536x1024_crop_center-center_61_line/Twin-Room-8001.jpg",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 40,
                            FloorId = 4,
                            ImgUrl = "https://www.lakedistricthotels.net/explore/wp-content/uploads/2024/01/Lake-View-Feature-2024-6.jpg",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 41,
                            FloorId = 4,
                            ImgUrl = "https://assets.langhamhotels.com/is/image/langhamhotelsstage/tlbos-rooms-parkview-club:Medium?wid=675&hei=380",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 42,
                            FloorId = 4,
                            ImgUrl = "https://image-tc.galaxy.tf/wijpeg-ajs2zf31tbtrqj8agj6w4xhta/alextphoto-com-clinton-hotel-room-346-1-highres_wide.jpg?crop=0%2C100%2C1920%2C1080",
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 43,
                            FloorId = 4,
                            ImgUrl = "https://cdn.dirigible.studio/wp-content/uploads/sites/84/2015/08/22115829/Edgewater_Rooms11447.jpg.webp",
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 44,
                            FloorId = 4,
                            ImgUrl = "https://cdn.kimkim.com/files/a/images/e47400f530f231b194e51129b88e62121df3ce62/original-eaa5e83a80ea995bd2689936e89df8d1.jpg",
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        });
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Double"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Studio"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Apartment"
                        });
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.ViewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ViewTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sea View"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Park View"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.ReservationRoom", b =>
                {
                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.Room", b =>
                {
                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.ViewType", "ViewType")
                        .WithMany()
                        .HasForeignKey("ViewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("RoomType");

                    b.Navigation("ViewType");
                });
#pragma warning restore 612, 618
        }
    }
}
