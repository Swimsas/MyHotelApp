// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyHotelApp.Infrastructure.Data;

#nullable disable

namespace MyHotelApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240309162530_SeedRoomsData")]
    partial class SeedRoomsData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.26")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "First"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Second"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Third"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Fourth"
                        });
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.ReservationRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("ReservationRooms");
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ViewTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomTypeId");

                    b.HasIndex("ViewTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 8,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 9,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            FloorId = 1,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 12,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 14,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 15,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 16,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 18,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 19,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 21,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 22,
                            FloorId = 2,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 23,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 24,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 25,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 26,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 27,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 28,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 29,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 30,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 31,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 32,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 33,
                            FloorId = 3,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 34,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 35,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 36,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 37,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 38,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 39,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 40,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 41,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 42,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 1,
                            ViewTypeId = 2
                        },
                        new
                        {
                            Id = 43,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 2,
                            ViewTypeId = 1
                        },
                        new
                        {
                            Id = 44,
                            FloorId = 4,
                            Price = 200m,
                            RoomTypeId = 3,
                            ViewTypeId = 2
                        });
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Double"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Studio"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Apartment"
                        });
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.ViewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ViewTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sea View"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Park View"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.ReservationRoom", b =>
                {
                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyHotelApp.Infrastructure.Data.Model.Room", b =>
                {
                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.RoomType", "RoomType")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyHotelApp.Infrastructure.Data.Model.ViewType", "ViewType")
                        .WithMany()
                        .HasForeignKey("ViewTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("RoomType");

                    b.Navigation("ViewType");
                });
#pragma warning restore 612, 618
        }
    }
}
